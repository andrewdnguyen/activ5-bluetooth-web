{"version":3,"file":"activ5-device.js.map","sources":["ng://activ5-device/a5-device-manager.ts"],"sourcesContent":["/// <reference path=\"index.d.ts\" />\n\nimport { Observable, Subject } from 'rxjs';\n\nenum DeviceUUID {\n  SERVICE = '00005000-0000-1000-8000-00805f9b34fb',\n  READ = '00005a01-0000-1000-8000-00805f9b34fb',\n  WRITE = '00005a02-0000-1000-8000-00805f9b34fb'\n}\n\nenum DeviceCommands {\n  TVGTIME = 'TVGTIME',\n  ISOM = 'ISOM!',\n  TARE = 'TARE!',\n  STOP = 'STOP!'\n}\n\nenum DeviceState {\n  handshake = 'handshake',\n  isometric = 'isometric',\n  stop = 'stop',\n  disconnected = 'disconnected'\n}\n\nexport class A5DeviceManager {\n\n  public async connect(): Promise<A5Device> {\n    if (window.navigator && window.navigator.bluetooth) {\n      const device = await navigator.bluetooth.requestDevice({ filters: [{ services: [DeviceUUID.SERVICE] }] });\n      const server = await device.gatt.connect();\n      const service = await server.getPrimaryService(DeviceUUID.SERVICE);\n\n      return new A5Device(device, server, service);\n    }\n  }\n\n}\n\nexport class A5Device {\n\n  constructor(device: BluetoothDevice, server: BluetoothRemoteGATTServer, service: BluetoothRemoteGATTService) {\n    this.device = device;\n    this.server = server;\n    this.service = service;\n\n    this.init();\n  }\n\n  private device: BluetoothDevice;\n  private server: BluetoothRemoteGATTServer;\n  private service: BluetoothRemoteGATTService;\n\n  private disconnectEventAsObservable = new Subject<Event>();\n  private isomDataAsObservable = new Subject<string>();\n\n  private evergreenModeTimer: number;\n  private characteristics = new Map();\n  private deviceState = DeviceState.disconnected;\n\n  public getIsometricData(): Observable<string> {\n    return this.isomDataAsObservable.asObservable();\n  }\n\n  public onDisconnect(): Observable<Event> {\n    return this.disconnectEventAsObservable.asObservable();\n  }\n\n  public async startIsometric(): Promise<void> {\n    await this.writeCharacteristicValue(this.formatCommand(DeviceCommands.ISOM));\n    this.deviceState = DeviceState.isometric;\n\n    const characteristic = await this.startNotifications();\n    this.attachIsometricListener(characteristic);\n  }\n\n  public tare(): void {\n    this.writeCharacteristicValue(this.formatCommand(DeviceCommands.TARE));\n  }\n\n  public async stop(): Promise<void> {\n    await this.writeCharacteristicValue(this.formatCommand(DeviceCommands.STOP));\n    this.deviceState = DeviceState.stop;\n  }\n\n  public evergreenMode(isEvergreenMode: boolean): void {\n    if (isEvergreenMode) {\n      this.evergreenModeTimer = window.setInterval(() => {\n        switch (this.deviceState) {\n          case DeviceState.stop: case DeviceState.handshake:\n            this.stop();\n            break;\n          default:\n            break;\n        }\n      }, 60000);\n    } else {\n      clearInterval(this.evergreenModeTimer);\n    }\n  }\n\n  public disconnect(): void {\n    this.device.gatt.disconnect();\n  }\n\n  private async init(): Promise<void> {\n    await this.cacheCharacteristic(DeviceUUID.READ);\n    await this.cacheCharacteristic(DeviceUUID.WRITE);\n\n    await this.writeCharacteristicValue(this.formatCommand(DeviceCommands.TVGTIME));\n\n\n    this.deviceState = DeviceState.handshake;\n    this.attachDisconnectListener();\n  }\n\n  private attachDisconnectListener(): void {\n    this.device.addEventListener('gattserverdisconnected', (event: Event) => {\n      this.disconnectEventAsObservable.next(event);\n      this.deviceState = DeviceState.disconnected;\n      this.device = undefined;\n      this.server = undefined;\n      this.service = undefined;\n    });\n  }\n\n  private async cacheCharacteristic(characteristicUuid: string): Promise<void> {\n    const characteristic = await this.service.getCharacteristic(characteristicUuid);\n    this.characteristics.set(characteristicUuid, characteristic);\n  }\n\n  private writeCharacteristicValue(value: DataView): Promise<void> {\n    const characteristic = this.characteristics.get(DeviceUUID.WRITE);\n    return characteristic.writeValue(value);\n  }\n\n  private startNotifications(): Promise<BluetoothRemoteGATTCharacteristic> {\n    const characteristic = this.characteristics.get(DeviceUUID.READ);\n    return characteristic.startNotifications();\n  }\n\n  private attachIsometricListener(characteristic: BluetoothRemoteGATTCharacteristic): void {\n    characteristic.addEventListener('characteristicvaluechanged', event => {\n      const target = event.target as BluetoothRemoteGATTCharacteristic;\n      this.parseData(target.value);\n    });\n  }\n\n  private parseData(data: DataView): void {\n    const deviceDataAsString = String.fromCharCode.apply(null, new Uint8Array(data.buffer));\n    const isomData = deviceDataAsString.match(/IS(.*)\\/IS/)[1];\n\n    this.isomDataAsObservable.next(isomData);\n  }\n\n  private formatCommand(type: string): DataView {\n    const buffer = new ArrayBuffer(type.length + 2);\n    const dataView = new DataView(buffer, 0);\n\n    dataView.setUint8(0, 65);\n\n    for (let i = 0; i < type.length; i++) {\n        dataView.setUint8(i + 1, type.charCodeAt(i));\n    }\n\n    dataView.setUint8(type.length + 1, 25);\n\n    return dataView;\n  }\n\n}\n\n\n// export class A5DeviceManager {\n\n//   private devices: BluetoothDevice[] = [];\n//   private servers: BluetoothRemoteGATTServer[] = [];\n//   private services: BluetoothRemoteGATTService[] = [];\n\n//   private characteristics = [ new Map(), new Map() ];\n//   private devicesStates = [ DeviceState.disconnected, DeviceState.disconnected ];\n//   private deviceNumber = 0;\n\n//   private evergreenModeTimers: number[] = [];\n\n//   private disconnectEventsAsObservable = new Subject<Event[]>();\n//   private isomDatasAsObservable = new Subject<string[]>();\n\n\n//   public getIsometricData(): Observable<string> {\n//     return this.isomDataAsObservable.asObservable();\n//   }\n\n//   public onDisconnect(): Observable<Event> {\n//     return this.disconnectEventAsObservable.asObservable();\n//   }\n\n//   public async connect(): Promise<BluetoothDevice[]> {\n\n//     if (window.navigator && window.navigator.bluetooth) {\n//       this.deviceNumber = this.devices[0] ? 1 : 0;\n      \n//       let device = this.devices[this.deviceNumber];\n//       let server = this.servers[this.deviceNumber];\n//       let service = this.services[this.deviceNumber];\n//       let deviceState = this.devicesStates[this.deviceNumber];\n\n//       device = await navigator.bluetooth.requestDevice({ filters: [{ services: [DeviceUUID.SERVICE] }] });\n//       server = await device.gatt.connect();\n//       service = await server.getPrimaryService(DeviceUUID.SERVICE);\n\n//       await this.cacheCharacteristic(DeviceUUID.READ);\n//       await this.cacheCharacteristic(DeviceUUID.WRITE);\n\n//       await this.writeCharacteristicValue(this.formatCommand(DeviceCommands.TVGTIME));\n\n\n//       deviceState = DeviceState.handshake;\n//       //this.attachDisconnectListener();\n\n//       return this.devices;\n//     }\n//   }\n\n//   public async startIsometric(): Promise<void> {\n//     await this.writeCharacteristicValue(this.formatCommand(DeviceCommands.ISOM));\n//     this.deviceState = DeviceState.isometric;\n\n//     const characteristic = await this.startNotifications();\n//     this.attachIsometricListener(characteristic);\n//   }\n\n//   public tare(): void {\n//     this.writeCharacteristicValue(this.formatCommand(DeviceCommands.TARE));\n//   }\n\n//   public async stop(): Promise<void> {\n//     await this.writeCharacteristicValue(this.formatCommand(DeviceCommands.STOP));\n//     this.deviceState = DeviceState.stop;\n//   }\n\n//   public evergreenMode(isEvergreenMode: boolean): void {\n//     if (isEvergreenMode) {\n//       this.evergreenModeTimer = window.setInterval(() => {\n//         switch (this.deviceState) {\n//           case DeviceState.stop: case DeviceState.handshake:\n//             this.stop();\n//             break;\n//           default:\n//             break;\n//         }\n//       }, 60000);\n//     } else {\n//       clearInterval(this.evergreenModeTimer);\n//     }\n//   }\n\n//   public disconnect(): void {\n//     this.device.gatt.disconnect();\n//   }\n\n//   private attachDisconnectListener(): void {\n//     this.device.addEventListener('gattserverdisconnected', (event: Event) => {\n//       this.disconnectEventAsObservable.next(event);\n//       this.deviceState = DeviceState.disconnected;\n//       this.device = undefined;\n//       this.server = undefined;\n//       this.service = undefined;\n//     });\n//   }\n\n//   private async cacheCharacteristic(characteristicUuid: string): Promise<void> {\n//     const service = this.services[this.deviceNumber];\n//     const characteristics = this.characteristics[this.deviceNumber];\n//     const characteristic = await service.getCharacteristic(characteristicUuid);\n//     characteristics.set(characteristicUuid, characteristic);\n//   }\n\n//   private writeCharacteristicValue(value: DataView): Promise<void> {\n//     const characteristics = this.characteristics[this.deviceNumber];\n//     return characteristics.get(DeviceUUID.WRITE).writeValue(value);\n//   }\n\n//   private startNotifications(): Promise<BluetoothRemoteGATTCharacteristic> {\n//     const characteristic = this.characteristics[this.deviceNumber].get(DeviceUUID.READ);\n//     return characteristic.startNotifications();\n//   }\n\n//   private attachIsometricListener(characteristic: BluetoothRemoteGATTCharacteristic): void {\n//     characteristic.addEventListener('characteristicvaluechanged', event => {\n//       const target = event.target as BluetoothRemoteGATTCharacteristic;\n//       this.parseData(target.value);\n//     });\n//   }\n\n//   private parseData(data: DataView): void {\n//     const deviceDataAsString = String.fromCharCode.apply(null, new Uint8Array(data.buffer));\n//     const isomData = deviceDataAsString.match(/IS(.*)\\/IS/)[1];\n\n//     this.isomDatasAsObservable.next(isomData);\n//   }\n\n//   private formatCommand(type: string): DataView {\n//     const buffer = new ArrayBuffer(type.length + 2);\n//     const dataView = new DataView(buffer, 0);\n\n//     dataView.setUint8(0, 65);\n\n//     for (let i = 0; i < type.length; i++) {\n//         dataView.setUint8(i + 1, type.charCodeAt(i));\n//     }\n\n//     dataView.setUint8(type.length + 1, 25);\n\n//     return dataView;\n//   }\n"],"names":[],"mappings":"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"}
